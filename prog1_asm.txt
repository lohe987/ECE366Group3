Disassembling from Program 1...
 
init R0, 0         // R0 = 0
add R0, R0         // R0 = R0 + R0
init R0, 1         // R0 = 1
initR2              //initialize R2 to 5
add R1, R0         // R1 = R1 + R0
store R1, (R0)         // M[R0] <- R1
init R1, 1         // R1 = 1
add R1, R1         // R1 = R1 + R1
add R1, R1         // R1 = R1 + R1
add R1, R1         // R1 = R1 + R1
add R1, R1         // R1 = R1 + R1
add R1, R1         // R1 = R1 + R1
add R1, R1         // R1 = R1 + R1
init R0, 0         // R0 = 0
add R0, R1         // R0 = R0 + R1
store R1, (R1)         // M[R1] <- R1
load R1, (R0)         // R1 <- M[R0] 
init R0, 0         // R0 = 0
load R0, (R0)         // R0 <- M[R0] 
bezR2, 1         // if R2 ==0: PC = PC + imm , else: PC++ 
jump 1         // PC = PC + imm 
init R1, 1         // R1 = 1
init R0, 0         // R0 = 0
add R0, R0         // R0 = R0 + R0
add R0, R0         // R0 = R0 + R0
add R0, R0         // R0 = R0 + R0
add R0, R0         // R0 = R0 + R0
add R1, R1         // R1 = R1 + R1
sub R1, R0         // R1 = R1 - R0
slt R1, R0         // if R1 < R0, R1 = 1 
bezR2, 3         // if R2 ==0: PC = PC + imm , else: PC++ 
store R1, (R0)         // M[R0] <- R1
STOP
