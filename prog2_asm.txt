Disassembling Program 2...
 
init R0, 0         // R0 = 0
init R0, 1         // R0 = 1
add R0, R0         // R0 = R0 + R0
add R0, R0         // R0 = R0 + R0
load R0, (R0)         // R0 <- M[R0] 
initR2              //initialize R2 to 5
add R1, R0         // R1 = R1 + R0
add R1, R0         // R1 = R1 + R0
add R1, R1         // R1 = R1 + R1
add R1, R1         // R1 = R1 + R1
add R1, R1         // R1 = R1 + R1
load R1, (R1)         // R1 <- M[R1] 
beqInc               // if R0 == R1 branch to Increment
init R1, 1         // R1 = 1
add R0, R1         // R0 = R0 + R1
sub R1, R0         // R1 = R1 - R0
bezR2, 3         // if R2 ==0: PC = PC + imm , else: PC++ 
jump 5         // PC = PC + imm 
init R0, 0         // R0 = 0
add R0, R0         // R0 = R0 + R0
add R0, R1         // R0 = R0 + R1
sub R1, R0         // R1 = R1 - R0
jump 5         // PC = PC + imm 
initR3              //initialize R3 to 5
store R0, (R0)         // M[R0] <- R0
STOP
